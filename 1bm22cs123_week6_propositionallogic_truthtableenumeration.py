# -*- coding: utf-8 -*-
"""1BM22CS123_Week6_PropositionalLogic_TruthTableEnumeration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vM_vs85tEyadHL_St25CyCNW5hqQrBE7
"""

import itertools

# Define a simple way to evaluate a formula in propositional logic
def evaluate_formula(formula, valuation):
    # Replace variables in the formula with their truth values from the valuation
    formula = formula.replace('p', str(valuation['p']))
    formula = formula.replace('q', str(valuation['q']))

    # Evaluate the logical expression using Python's eval() function
    return eval(formula)

# Extract all the variables (propositional symbols) from a formula
def extract_variables(formula):
    variables = set()
    for char in formula:
        if char.isalpha():  # Add variable if it's a letter (e.g., p, q)
            variables.add(char)
    return list(variables)

# Generate the truth table and check entailment
def generate_truth_table(KB, query):
    # Extract all the propositional variables from the KB and query
    variables = extract_variables(KB) + extract_variables(query)
    variables = list(set(variables))  # Remove duplicates

    # Print headers for the truth table
    print("Truth Table:")
    print(" | ".join(variables + ["KB", "Query"]))
    print("-" * (len(variables) * 4 + 12))

    # Track whether KB entails query (KB => query)
    entails_query = True

    # Generate all possible truth assignments for the variables
    for assignment in itertools.product([False, True], repeat=len(variables)):
        valuation = dict(zip(variables, assignment))

        # Evaluate KB and query under this assignment
        KB_truth = evaluate_formula(KB, valuation)
        query_truth = evaluate_formula(query, valuation)

        # Print the truth values for the variables, KB, and query
        row = [str('T' if valuation[var] else 'F') for var in variables]  # Values for variables
        row.append(str('T' if KB_truth else 'F'))  # KB truth value
        row.append(str('T' if query_truth else 'F'))  # Query truth value
        print(" | ".join(row))

        # Check if KB is true and query is false (this would violate entailment)
        if KB_truth and not query_truth:
            entails_query = False

    # Output whether KB entails query
    print("\nKB entails query:", entails_query)

# Example usage: Accepting user input for KB and query
KB = input("Enter the knowledge base (e.g., 'p and (p != q)'): ")
query = input("Enter the query (e.g., 'q'): ")

# Call the function to generate the truth table and check entailment
generate_truth_table(KB, query)